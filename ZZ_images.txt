Create_user : 
@startuml
Client -> Server : send( username, salt, auth_key, Pubkey_sign, Pubkey_enc, Encrypted_sign_key, Encrypted_enc_key )
Server -> Database : store()
@enduml

Retrieve Keys from another device:
@startuml
Client -> Server : get_salt( username )
Server -> Database : get_salt( username )
Database -> Server : salt
Server -> Client : send( salt )
Client -> Client : generate auth_key
Client -> Server : retreive_keys( username, auth_key )
Server -> Database : verify_auth_key( username, auth_key )
Database -> Server : 
Server -> Database : get_user_encrypted_key( Encrypted_sign_key, Encrypted_enc_key )
Database -> Server : 
Server -> Client : send( Encrypted_sign_key, Encrypted_enc_key )
@enduml

Reset password : 
@startuml
Client -> Client: Old_auth_key
Client -> Client: MasterKey = Argon2ID(new_password, new_salt)
Client -> Client: Auth_key = HKDF(MasterKey, "Auth")
Client -> Client: Enc_key = HKDF(MasterKey, "Enc")
Client -> Client: New_Enc_Priv_Keys = Encrypt(Priv_Keys, Enc_key)
Client -> Server : reset_password ( username, salt, auth_key, Encrypted_sign_key, Encrypted_enc_key, signature )
Server -> Server : verify_signature(), verify_auth_key()
Server -> Database : update_user()
@enduml

Send message : 

@startuml
Client -> Server : get_pub_keys( receiver )
Server -> Database : get_pub_keys( receiver )
Database -> Server :
Server -> Client : public keys receiver

Client -> Client : k_msg = generate_symmetric_key()
Client -> Client : ciphertext, nonce = encrypt_message_symmetric(message, k_msg)
Client -> Client : encrypted_k_msg = encrypt_key_asymmetric(k_msg, pubkey_recipient)

Client -> Client : unlock_date + signature

Client -> Server : send_messages(  message_id, sender, recipient, message_type, payload, signature )

Server -> Server : verify_signature()
Server -> Server : challenge_key = generate_challenge_key()
Server -> Server : N, T, C = generate_TLP(challenge_key, unlock_time)

Server -> Database : store_original_encrypted_k_msg(message_id, encrypted_k_msg)
Server -> Server : double_encrypted = encrypt_with_challenge_key(encrypted_k_msg, challenge_key)
Server -> Database : store_message()
@enduml

